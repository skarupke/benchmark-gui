#include "util/ska_sort2.hpp"


#ifndef DISABLE_GTEST

#include "test/include_test.hpp"
#include <random>
#include <list>

extern const std::vector<const char *> & get_word_list();
extern const std::vector<const char *> & get_kern_log();
extern thread_local std::mt19937_64 global_randomness;

namespace
{

struct AmericanFlagSortSettings : detail::DefaultSortSettings
{
    template<typename>
    static constexpr std::ptrdiff_t InsertionSortUpperLimit = 1;
    static constexpr std::ptrdiff_t AmericanFlagSortUpperLimit = std::numeric_limits<std::ptrdiff_t>::max();
};
struct SkaByteSortSettings : detail::DefaultSortSettings
{
    template<typename>
    static constexpr std::ptrdiff_t InsertionSortUpperLimit = 1;
    static constexpr std::ptrdiff_t AmericanFlagSortUpperLimit = 1;
};
struct NoFasterCompareSettings : detail::DefaultSortSettings
{
    static constexpr bool UseFasterCompare = !detail::DefaultSortSettings::UseFasterCompare;
};

template<typename Container>
::testing::AssertionResult TestAllSkaSort2Combinations(const Container & container)
{
    Container copy = container;
    ska_sort2(copy.begin(), copy.end());
    if (!std::is_sorted(copy.begin(), copy.end()))
    {
        return ::testing::AssertionFailure() << "ska_sort2 didn't sort";
    }
    copy = container;
    detail::ska_sort2_with_settings<AmericanFlagSortSettings>(copy.begin(), copy.end());
    if (!std::is_sorted(copy.begin(), copy.end()))
    {
        return ::testing::AssertionFailure() << "ska_sort2 american flag sort didn't sort";
    }
    copy = container;
    detail::ska_sort2_with_settings<SkaByteSortSettings>(copy.begin(), copy.end());
    if (!std::is_sorted(copy.begin(), copy.end()))
    {
        return ::testing::AssertionFailure() << "ska_sort2 byte sort didn't sort";
    }
    copy = container;
    detail::ska_sort2_with_settings<NoFasterCompareSettings>(copy.begin(), copy.end());
    if (!std::is_sorted(copy.begin(), copy.end()))
    {
        return ::testing::AssertionFailure() << "ska_sort2 with faster compare didn't sort";
    }
    return ::testing::AssertionSuccess();
}

TEST(ska_sort2, bytes)
{
    std::vector<unsigned char> data = { 1, 3, 2, 50, 2, 3, 70, 3, 255, 2 };
    ASSERT_TRUE(TestAllSkaSort2Combinations(data));
}
TEST(ska_sort2, chars)
{
    std::vector<char> data = { 'a', 'z', 'b', 'r', 'w', 'v', 'x', 'u', ',', '4', '2', '7', 'W', '_' };
    ASSERT_TRUE(TestAllSkaSort2Combinations(data));
}
TEST(ska_sort2, unsigned_short)
{
    std::vector<unsigned short> data = { 1, 0, 65535, 16000, 16001, 16002, 16001, 16005, 16010, 16007, 10, 70, 3 };
    ASSERT_TRUE(TestAllSkaSort2Combinations(data));
}
TEST(ska_sort2, short)
{
    std::vector<short> data = { 1, 0, std::numeric_limits<short>::max(), -10, std::numeric_limits<short>::lowest(), 16000, -16000, 16001, 16002, 16001, 16005, 16010, 16007, 10, 70, 3 };
    ASSERT_TRUE(TestAllSkaSort2Combinations(data));
}
TEST(ska_sort2, bool)
{
    std::vector<short> data = { true, false, true, true, false, false, true, true, true, true, false };
    ASSERT_TRUE(TestAllSkaSort2Combinations(data));
}
TEST(ska_sort2, pair)
{
    std::vector<std::pair<short, int>> data =
    {
        { 1, 0 },
        { 1, 2 },
        { 1, -3 },
        { 10, 2 },
        { 1, -4 },
        { 10, 0 },
        { -10, 7 },
        { -10, -10 },
        { 10, 10 }
    };
    ASSERT_TRUE(TestAllSkaSort2Combinations(data));
}
TEST(ska_sort2, tuple)
{
    std::vector<std::tuple<bool, int, bool>> data = { std::tuple<bool, int, bool>{ true, 5, true }, std::tuple<bool, int, bool>{ true, 5, false }, std::tuple<bool, int, bool>{ false, 6, false }, std::tuple<bool, int, bool>{ true, 7, true }, std::tuple<bool, int, bool>{ true, 4, false }, std::tuple<bool, int, bool>{ false, 4, true }, std::tuple<bool, int, bool>{ false, 5, false } };
    ASSERT_TRUE(TestAllSkaSort2Combinations(data));
}
TEST(ska_sort2, tuple_single)
{
    std::vector<std::tuple<int>> data = { std::tuple<int>{ 5 }, std::tuple<int>{ -5 }, std::tuple<int>{ 6 }, std::tuple<int>{ 7 }, std::tuple<int>{ 4 }, std::tuple<int>{ 4 }, std::tuple<int>{ 5 } };
    ASSERT_TRUE(TestAllSkaSort2Combinations(data));
}
TEST(ska_sort2, optional)
{
    std::vector<std::optional<int>> to_sort;
    to_sort.emplace_back(5);
    to_sort.emplace_back(std::nullopt);
    to_sort.emplace_back(6);
    to_sort.emplace_back(-3);
    to_sort.emplace_back(2);
    to_sort.emplace_back(7);
    to_sort.emplace_back(std::nullopt);
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}

TEST(ska_sort2, optional_in_pair)
{
    std::vector<std::pair<std::optional<int>, int>> to_sort;
    to_sort.emplace_back(5, 5);
    to_sort.emplace_back(std::nullopt, 4);
    to_sort.emplace_back(std::nullopt, 3);
    to_sort.emplace_back(std::nullopt, 8);
    to_sort.emplace_back(5, 2);
    to_sort.emplace_back(5, 100);
    to_sort.emplace_back(-5, 100);
    to_sort.emplace_back(-5, 2);
    to_sort.emplace_back(-5, 3);
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}

TEST(ska_sort2, string)
{
    std::vector<std::string> to_sort =
    {
        "Hi",
        "There",
        "Hello",
        "World!",
        "Foo",
        "Bar",
        "Baz",
        "",
    };
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}
TEST(ska_sort2, string_unicode)
{
    std::vector<std::string> to_sort =
    {
        "Hi",
        "There",
        "précis"
        "Hello",
        "prepayment",
        "World!",
        "scans",
        "séances",
        "Foo",
        "Bar",
        "née"
        "Baz",
        "naive"
        "",
        "some",
        "more",
        "strings",
        "to",
        "get",
        "over",
        ",",
        "16",
        "or",
        "32",
        "or some",
        "limit",
        "like",
        "that",
        "10000",
        "20000",
        "foo",
        "pirate",
        "rhino",
        "city",
        "blanket",
        "balloon",
    };
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}

TEST(ska_sort2, string_unicode_direct_compare)
{
    auto comparer = SkaSorter<std::string>::SortAtIndex{1};
    ASSERT_EQ(comparer("née", "naive"), std::less<std::string>{}("née", "naive"));
    ASSERT_TRUE(comparer("aaa", "aaaaa"));
    auto at_17 = SkaSorter<std::string>::SortAtIndex{17};
    ASSERT_EQ(at_17("aaaaaaaaaaaaaaaaaaaab", "aaaaaaaaaaaaaaaaaaaabb"), std::less<std::string>{}("aaaaaaaaaaaaaaaaaaaab", "aaaaaaaaaaaaaaaaaaaabb"));
}

TEST(ska_sort2, string_bad_case)
{
    std::vector<std::string> to_sort;
    for (int i = 0; i < 20; ++i)
    {
        to_sort.push_back("a");
        for (int j = 0; j < i; ++j)
        {
            to_sort.back() += 'a';
        }
    }
    for (int i = 0; i < 20; ++i)
    {
        to_sort.push_back(to_sort[19]);
        for (int j = 20; j > i; --j)
        {
            to_sort.back() += 'b';
        }
    }
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}

TEST(ska_sort2, float)
{
    std::vector<float> to_sort = { 5, 6, 19, std::numeric_limits<float>::infinity(), -std::numeric_limits<float>::infinity(), -4, 2, 5, 0, -55, 7, 1000, 23, 6, 8, 127, -128, -129, -256, 32768, -32769, -32768, 32767, 99, 1000000, -1000001, 0.1f, 2.5f, 17.8f, -12.4f, -0.0000002f, -0.0f, -777777777.7f, 444444444444.4f };
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}
static const std::vector<float> float_bug_input =
{
    -3305.68f, -2684.34f, -2234.62f, -1988.51f, -1965.32f, -1808.13f, -1800.42f, -1722.81f, -1704.51f, -1649.78f,
    -1591.76f, -1581.61f, -1566.55f, -1459.65f, -1382.87f, -1333.64f, -1319.45f, -1186.65f, -1098.14f, -1039.01f,
    -973.805f, -951.14f, -926.392f, -920.247f, -922.534f, -922.763f, -919.381f, -850.919f, -796.569f, -787.428f, -780.044f,
    -772.276f, -756.935f, -720.871f, -673.421f, -664.041f, -628.639f, -580.13f, -519.876f, -508.197f, -507.302f, -471.265f,
    -464.019f, -429.188f, -410.241f, -366.956f, -365.482f, -327.256f, -299.654f, -295.048f, -278.138f, -262.674f, -205.262f,
    -192.724f, -164.104f, -145.508f, -140.691f, -133.544f, -44.4212f, -20.0017f, -0.324011f, 19.3389f, 33.6625f, 79.592f,
    98.4721f, 111.029f, 142.54f, 158.674f, 166.794f, 183.275f, 187.558f, 206.012f, 217.915f, 225.862f, 240.096f, 248.95f,
    287.886f, 287.903f, 303.676f, 329.983f, 355.284f, 355.761f, 401.808f, 422.257f, 440.037f, 447.795f, 485.2f, 513.239f,
    530.438f, 540.15f, 551.101f, 591.771f, 604.096f, 627.521f, 643.663f, 644.669f, 729.3f, 740.218f, 747.142f, 754.765f,
    794.868f, 871.391f, 918.005f, 921.496f, 924.987f, 937.024f, 937.706f, 992.288f, 995.07f, 1000.17f, 1007.06f, 1062.04f,
    1069.21f, 1072.04f, 1162.66f, 1173.71f, 1180.34f, 1184.88f, 1249.75f, 1263.56f, 1298.19f, 1312.38f, 1365.59f, 1368.41f,
    1431.62f, 1462.83f, 1470.19f, 1508.33f
};
TEST(ska_sort2, float_bug)
{
    ASSERT_TRUE(TestAllSkaSort2Combinations(float_bug_input));
    std::vector<std::pair<bool, float>> in_pair;
    for (size_t i = 0; i < float_bug_input.size(); ++i)
    {
        in_pair.emplace_back(i < float_bug_input.size() / 2, float_bug_input[i]);
    }
    ASSERT_TRUE(TestAllSkaSort2Combinations(in_pair));
}
TEST(ska_sort2, DISABLED_float_compare)
{
    detail::FloatSorter<float>::CompareAsUint compare_positive;
    detail::FloatSorter<float>::CompareAsUintNegative compare_negative;
    for (size_t i = 1; i < float_bug_input.size(); ++i)
    {
        float first = float_bug_input[i - 1];
        float second = float_bug_input[i];
        if ((first < 0) != (second < 0))
            continue;
        if (first < 0)
        {
            ASSERT_TRUE(compare_negative(first, second) == (first < second));
            ASSERT_TRUE(compare_negative(second, first) == (second < first));
        }
        else
        {
            ASSERT_TRUE(compare_positive(first, second) == (first < second));
            ASSERT_TRUE(compare_positive(second, first) == (second < first));
        }
    }
}

TEST(ska_sort2, double)
{
    std::vector<double> to_sort = { 5, 6, 19, std::numeric_limits<double>::infinity(), -std::numeric_limits<double>::infinity(), -4, 2, 5, 0, -55, 7, 1000, 23, 6, 8, 127, -128, -129, -256, 32768, -32769, -32768, 32767, 99, 1000000, -1000001, 0.1, 2.5, 17.8, -12.4, -0.0000002, -0.0, -777777777.7, 444444444444.4, 1.0 / 3.0, -1.0 / 3.0 };
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}

TEST(ska_sort2, long_double)
{
    std::vector<long double> to_sort = { 5, 6, 19, std::numeric_limits<long double>::infinity(), -std::numeric_limits<long double>::infinity(), -4, 2, 5, 0, -55, 7, 1000, 23, 6, 8, 127, -128, -129, -256, 32768, -32769, -32768, 32767, 99, 1000000, -1000001, 0.1, 2.5, 17.8, -12.4, -0.0000002, -0.0, -777777777.7, 444444444444.4, static_cast<long double>(1.0) / static_cast<double>(3.0), -static_cast<long double>(1.0) / static_cast<long double>(3.0) };
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}

TEST(ska_sort2, DISABLED_float_backwards)
{
    auto to_unsigned_or_bool = [](float f)
    {
        union
        {
            float f;
            std::uint32_t u;
        } as_union = { f };
        std::uint32_t sign_bit = -std::int32_t(as_union.u >> 31);
        return as_union.u ^ (sign_bit | 0x80000000);
    };
    auto to_unsigned_or_bool_backwards = [](float f)
    {
        union
        {
            float f;
            std::uint32_t u;
        } as_union = { f };
        //std::uint32_t sign_bit = -std::int32_t(as_union.u >> 31);
        return as_union.u;// ^ 0x7fffffff;
    };
    std::vector<float> to_sort = { 5, 6, 19, std::numeric_limits<float>::infinity(), -std::numeric_limits<float>::infinity(), -4, 2, 5, 0, -55, 7, 1000, 23, 6, 8, 127, -128, -129, -256, 32768, -32769, -32768, 32767, 99, 1000000, -1000001, 0.1f, 2.5f, 17.8f, -12.4f, -0.0000002f, -0.0f, -777777777.7f, 444444444444.4f };
    std::vector<float> copy = to_sort;
    std::vector<float> copy_backwards = to_sort;
    std::sort(to_sort.begin(), to_sort.end());
    std::sort(copy.begin(), copy.end(), [&](float a, float b)
    {
        return to_unsigned_or_bool(a) < to_unsigned_or_bool(b);
    });
    std::sort(copy_backwards.rbegin(), copy_backwards.rend(), [&](float a, float b)
    {
        return to_unsigned_or_bool_backwards(a) < to_unsigned_or_bool_backwards(b);
    });
    ASSERT_TRUE(std::is_sorted(to_sort.begin(), to_sort.end()));
    ASSERT_TRUE(std::is_sorted(copy.begin(), copy.end()));
    ASSERT_TRUE(std::is_sorted(copy_backwards.begin(), copy_backwards.end()));
}

// todo: enable
#if 1

struct ThrowingType
{
    operator int() const
    {
        throw 5;
    }
};

TEST(ska_sort2, variant)
{
    std::vector<std::variant<int, std::string, float>> to_sort;
    to_sort.emplace_back(5);
    to_sort.emplace_back(0);
    to_sort.emplace_back("foo");
    to_sort.emplace_back("foo");
    to_sort.emplace_back("foo");
    to_sort.emplace_back("bar");
    to_sort.emplace_back(1.0f);
    to_sort.emplace_back(-2.0f);
    to_sort.emplace_back(-1);
    to_sort.emplace_back("baz3");
    to_sort.emplace_back("baz");
    to_sort.emplace_back("baz2");
    to_sort.emplace_back(7.0f);
    ASSERT_THROW(to_sort[2].emplace<0>(ThrowingType()), int);
    ASSERT_TRUE(to_sort[2].valueless_by_exception());
    ASSERT_THROW(to_sort[3].emplace<0>(ThrowingType()), int);
    ASSERT_TRUE(to_sort[3].valueless_by_exception());
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}

// currently breaks gdb due to a demangling bug
#if 0
TEST(ska_sort2, variant_in_pair)
{
    std::vector<std::pair<std::variant<int, float, std::string>, int>> to_sort;
    to_sort.emplace_back(5, 5);
    to_sort.emplace_back(0, 4);
    to_sort.emplace_back("foo", 2);
    to_sort.emplace_back("foo", 1);
    to_sort.emplace_back("foo", 3);
    to_sort.emplace_back(5, 3);
    to_sort.emplace_back(5, 1);
    to_sort.emplace_back(0, 8);
    to_sort.emplace_back(0, 2);
    to_sort.emplace_back(1.0f, 2);
    to_sort.emplace_back(1.0f, 21);
    to_sort.emplace_back(-2.0f, 3);
    to_sort.emplace_back(-2.0f, 4);
    to_sort.emplace_back(1.0f, -3);
    to_sort.emplace_back(1.0f, 3);
    to_sort.emplace_back(-2.0f, 2);
    ASSERT_THROW(to_sort[2].first.emplace<0>(ThrowingType()), int);
    ASSERT_TRUE(to_sort[2].first.valueless_by_exception());
    ASSERT_THROW(to_sort[3].first.emplace<0>(ThrowingType()), int);
    ASSERT_TRUE(to_sort[3].first.valueless_by_exception());
    ASSERT_THROW(to_sort[4].first.emplace<0>(ThrowingType()), int);
    ASSERT_TRUE(to_sort[4].first.valueless_by_exception());
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}
#endif

TEST(ska_sort2, buggy_vector)
{
    std::vector<std::vector<int>> to_sort =
    {
        { 65, 109, 101, 114, 105, 99, 97, 110, 105, 122, 105, 110, 103, 112, 114, 111, 102, 97, 110, 101, 111, 97, 115, 101, 115, 109, 105, 115, 100, 101, 101, 100, 115, 84, 117, 110, 105, 115, 105, 97 },
        { 65, 121, 109, 97, 114, 97, 112, 97, 116, 101, 108, 108, 97, 101, 115, 116, 114, 97, 105, 116, 106, 97, 99, 107, 101, 116, 105, 110, 103, 105, 109, 112, 114, 111, 118, 101, 100, 122, 101, 112, 112, 101, 108, 105, 110, 97, 108, 108, 111, 116, 115, 109, 101, 97, 108, 121, 98, 108, 97, 99, 107, 103, 117, 97, 114, 100, 115, 115, 104, 97, 116, 116, 101, 114, 76, 97, 117, 114, 97, 115, 105, 97 },
        { 67, 111, 110, 110, 112, 114, 111, 102, 101, 115, 115, 105, 111, 110, 97, 108, 108, 121, 66, 105, 108, 98, 97, 111, 89, 97, 109, 97, 104, 97 },
        { 68, 101, 99, 32, 49, 56, 32, 50, 49, 58, 50, 49, 58, 51, 49, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 48, 46, 48, 48, 48, 48, 48, 48, 93, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 105, 110, 103, 32, 99, 103, 114, 111, 117, 112, 32, 115, 117, 98, 115, 121, 115, 32, 99, 112, 117 },
        { 68, 101, 99, 32, 49, 56, 32, 50, 49, 58, 52, 54, 58, 52, 54, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 48, 46, 48, 57, 50, 48, 54, 53, 93, 32, 46, 46, 46, 46, 32, 110, 111, 100, 101, 32, 32, 35, 48, 44, 32, 67, 80, 85, 115, 58, 32, 32, 32, 32, 32, 32, 35, 49 },
        { 68, 101, 99, 32, 49, 56, 32, 50, 49, 58, 52, 54, 58, 52, 54, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 48, 46, 50, 56, 56, 56, 50, 57, 93, 32, 112, 99, 105, 32, 48, 48, 48, 48, 58, 48, 48, 58, 49, 52, 46, 48, 58, 32, 114, 101, 103, 32, 48, 120, 49, 48, 58, 32, 91, 109, 101, 109, 32, 48, 120, 100, 49, 55, 48, 48, 48, 48, 48, 45, 48, 120, 100, 49, 55, 48, 102, 102, 102, 102, 32, 54, 52, 98, 105, 116, 93 },
        { 68, 101, 99, 32, 50, 48, 32, 49, 56, 58, 52, 50, 58, 48, 48, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 52, 46, 52, 48, 52, 53, 57, 54, 93, 32, 78, 69, 84, 58, 32, 82, 101, 103, 105, 115, 116, 101, 114, 101, 100, 32, 112, 114, 111, 116, 111, 99, 111, 108, 32, 102, 97, 109, 105, 108, 121, 32, 49, 55 },
        { 68, 101, 99, 32, 50, 50, 32, 48, 56, 58, 48, 51, 58, 49, 56, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 52, 46, 51, 51, 56, 56, 53, 52, 93, 32, 117, 115, 98, 32, 117, 115, 98, 52, 58, 32, 78, 101, 119, 32, 85, 83, 66, 32, 100, 101, 118, 105, 99, 101, 32, 102, 111, 117, 110, 100, 44, 32, 105, 100, 86, 101, 110, 100, 111, 114, 61, 49, 100, 54, 98, 44, 32, 105, 100, 80, 114, 111, 100, 117, 99, 116, 61, 48, 48, 48, 51 },
        { 68, 101, 99, 32, 50, 50, 32, 48, 56, 58, 48, 51, 58, 49, 56, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 52, 46, 52, 53, 52, 51, 57, 52, 93, 32, 110, 118, 105, 100, 105, 97, 45, 109, 111, 100, 101, 115, 101, 116, 58, 32, 76, 111, 97, 100, 105, 110, 103, 32, 78, 86, 73, 68, 73, 65, 32, 75, 101, 114, 110, 101, 108, 32, 77, 111, 100, 101, 32, 83, 101, 116, 116, 105, 110, 103, 32, 68, 114, 105, 118, 101, 114, 32, 102, 111, 114, 32, 85, 78, 73, 88, 32, 112, 108, 97, 116, 102, 111, 114, 109, 115, 32, 32, 51, 54, 55, 46, 53, 55, 32, 32, 77, 111, 110, 32, 79, 99, 116, 32, 32, 51, 32, 50, 48, 58, 51, 50, 58, 53, 55, 32, 80, 68, 84, 32, 50, 48, 49, 54 },
        { 68, 101, 99, 32, 50, 52, 32, 48, 57, 58, 49, 57, 58, 51, 54, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 48, 46, 48, 56, 57, 53, 56, 56, 93, 32, 46, 46, 46, 32, 118, 97, 108, 117, 101, 32, 109, 97, 115, 107, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 48, 48, 48, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102 },
        { 68, 101, 99, 32, 50, 52, 32, 49, 52, 58, 52, 50, 58, 52, 55, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 51, 57, 50, 48, 46, 52, 54, 48, 52, 53, 49, 93, 32, 65, 67, 80, 73, 58, 32, 87, 97, 107, 105, 110, 103, 32, 117, 112, 32, 102, 114, 111, 109, 32, 115, 121, 115, 116, 101, 109, 32, 115, 108, 101, 101, 112, 32, 115, 116, 97, 116, 101, 32, 83, 51 },
        { 68, 101, 99, 32, 50, 54, 32, 49, 54, 58, 51, 56, 58, 53, 51, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 48, 46, 48, 48, 48, 48, 48, 48, 93, 32, 65, 67, 80, 73, 58, 32, 83, 83, 68, 84, 32, 48, 120, 48, 48, 48, 48, 48, 48, 48, 48, 57, 67, 70, 69, 55, 48, 48, 48, 32, 48, 48, 50, 48, 50, 56, 32, 40, 118, 48, 49, 32, 76, 69, 78, 79, 86, 79, 32, 67, 66, 45, 48, 49, 32, 32, 32, 32, 48, 48, 48, 48, 48, 48, 48, 49, 32, 65, 67, 80, 73, 32, 48, 48, 48, 52, 48, 48, 48, 48, 41 },
        { 68, 101, 99, 32, 50, 54, 32, 49, 54, 58, 51, 56, 58, 53, 51, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 48, 46, 50, 56, 48, 49, 57, 55, 93, 32, 112, 99, 105, 32, 48, 48, 48, 48, 58, 48, 48, 58, 48, 50, 46, 48, 58, 32, 114, 101, 103, 32, 48, 120, 49, 56, 58, 32, 91, 109, 101, 109, 32, 48, 120, 99, 48, 48, 48, 48, 48, 48, 48, 45, 48, 120, 99, 102, 102, 102, 102, 102, 102, 102, 32, 54, 52, 98, 105, 116, 32, 112, 114, 101, 102, 93 },
        { 68, 101, 99, 32, 50, 54, 32, 49, 54, 58, 51, 56, 58, 53, 51, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 48, 46, 52, 50, 51, 54, 52, 48, 93, 32, 115, 121, 115, 116, 101, 109, 32, 48, 48, 58, 48, 54, 58, 32, 91, 109, 101, 109, 32, 48, 120, 102, 102, 48, 49, 48, 48, 48, 48, 45, 48, 120, 102, 102, 102, 102, 102, 102, 102, 102, 93, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 98, 101, 32, 114, 101, 115, 101, 114, 118, 101, 100 },
        { 68, 101, 99, 32, 50, 55, 32, 49, 51, 58, 51, 48, 58, 52, 52, 32, 109, 97, 108, 116, 101, 45, 76, 101, 110, 111, 118, 111, 32, 107, 101, 114, 110, 101, 108, 58, 32, 91, 32, 32, 32, 32, 48, 46, 49, 55, 56, 48, 53, 56, 93, 32, 91, 70, 105, 114, 109, 119, 97, 114, 101, 32, 66, 117, 103, 93, 58, 32, 65, 67, 80, 73, 58, 32, 66, 73, 79, 83, 32, 95, 79, 83, 73, 40, 76, 105, 110, 117, 120, 41, 32, 113, 117, 101, 114, 121, 32, 105, 103, 110, 111, 114, 101, 100 },
        { 68, 105, 115, 114, 97, 101, 108, 105, 99, 108, 111, 105, 115, 116, 101, 114, 114, 101, 99, 116, 117, 109, 115, 114, 101, 112, 97, 114, 97, 116, 105, 111, 110 },
        { 71, 97, 98, 111, 110, 100, 105, 115, 116, 114, 117, 115, 116, 102, 117, 108, 99, 121, 116, 111, 112, 108, 97, 115, 109, 112, 104, 97, 114, 109, 97, 99, 111, 112, 101, 105, 97, 115 },
        { 71, 97, 117, 116, 97, 109, 97, 116, 111, 110, 121, 110, 117, 116, 115, 72, 105, 114, 111, 98, 117, 109, 105, 112, 108, 97, 115, 116, 101, 114, 101, 100, 98, 114, 105, 97, 114 },
        { 71, 111, 114, 101, 110, 99, 114, 101, 97, 116, 105, 111, 110, 112, 114, 101, 112, 97, 99, 107, 97, 103, 101, 100, 113, 117, 97, 115, 104, 101, 100, 114, 97, 110, 103, 105, 110, 103, 116, 114, 121, 115, 116, 112, 97, 99, 107, 114, 101, 97, 114, 105, 110, 103, 115, 117, 98, 115, 112, 97, 99, 101, 109, 105, 108, 101, 97, 103, 101 },
        { 71, 111, 121, 97, 117, 110, 100, 101, 114, 115, 105, 122, 101, 102, 114, 101, 115, 104, 101, 116, 114, 111, 109, 97, 110, 116, 105, 99, 105, 122, 101, 115, 97, 117, 100, 105, 116, 105, 111, 110, 105, 110, 103, 77, 97, 110, 100, 121, 100, 101, 119, 98, 101, 114, 114, 105, 101, 115 },
        { 71, 117, 105, 110, 101, 97, 110, 115, 116, 104, 117, 110, 100, 101, 114, 115, 116, 111, 114, 109, 115, 98, 97, 99, 107, 104, 97, 110, 100, 101, 100, 101, 110, 99, 108, 111, 115, 101, 100, 109, 105, 115, 103, 117, 105, 100, 101, 115, 99, 117, 114, 115, 101, 115, 106, 111, 100, 104, 112, 117, 114, 115, 65, 114, 97, 98, 105, 97, 110, 115, 83, 112, 101, 110, 99, 101, 114, 105, 97, 110, 101, 120, 116, 101, 109, 112, 111, 114, 97, 110, 101, 111, 117, 115 },
        { 71, 117, 112, 116, 97, 111, 118, 97, 108, 115, 115, 116, 114, 105, 107, 101, 111, 117, 116, 115 },
        { 74, 97, 99, 107, 108, 121, 110, 115, 116, 97, 116, 117, 101, 116, 116, 101, 108, 101, 103, 105, 98, 108, 121, 112, 114, 101, 118, 97, 114, 105, 99, 97, 116, 105, 111, 110, 72, 117, 103, 111, 118, 111, 119, 105, 110, 103 },
        { 77, 97, 99, 101, 108, 101, 97, 107, 105, 101, 115, 116, 101, 116, 104, 110, 111, 108, 111, 103, 105, 115, 116, 115, 119, 104, 111, 111, 112, 105, 110, 103, 114, 105, 118, 97, 108, 108, 105, 110, 103 },
        { 78, 101, 118, 75, 97, 116, 104, 108, 101, 101, 110, 102, 111, 120, 103, 108, 111, 118, 101, 115, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 112, 97, 110, 116, 104, 101, 111, 110, 115, 105, 109, 112, 114, 101, 99, 97, 116, 105, 111, 110, 115, 105, 110, 99, 97, 110, 116, 97, 116, 105, 111, 110, 114, 97, 110, 103, 105, 101, 115, 116 },
        { 80, 97, 116, 115, 121, 101, 120, 105, 115, 116, 105, 110, 115, 105, 110, 117, 97, 116, 105, 110, 103, 71, 97, 101, 108, 105, 99 },
        { 80, 101, 99, 107, 105, 110, 112, 97, 104 },
        { 80, 111, 117, 115, 115, 105, 110, 112, 101, 110, 105, 115, 103, 121, 109, 110, 97, 115, 116 },
        { 84, 97, 116, 97, 114, 115, 76, 101, 103, 114, 101, 101, 109, 105, 115, 117, 110, 100, 101, 114, 115, 116, 111, 111, 100, 102, 111, 114, 101, 99, 108, 111, 115, 101, 100, 67, 97, 108, 118, 105, 110, 105, 115, 116, 115, 101, 99, 117, 108, 97, 114, 105, 122, 101, 100 },
        { 84, 111, 106, 111, 112, 114, 101, 111, 99, 99, 117, 112, 105, 101, 100, 117, 114, 110, 115, 116, 114, 97, 110, 115, 111, 99, 101, 97, 110, 105, 99, 103, 114, 105, 112, 105, 110, 103, 114, 97, 99, 101, 104, 111, 114, 115, 101, 110, 121, 109, 112, 104, 111, 109, 97, 110, 105, 97 },
        { 85, 112, 106, 111, 104, 110, 100, 101, 98, 105, 108, 105, 116, 97, 116, 105, 110, 103, 66, 111, 119, 101, 110, 114, 111, 99, 107, 115 },
        { 89, 117, 103, 111, 115, 108, 97, 118, 116, 97, 115, 115, 101, 108, 115, 83, 121, 108, 118, 105, 97 },
        { 97, 102, 116, 101, 114, 103, 108, 111, 119, 115, 97, 115, 107, 97, 110, 99, 101, 100, 101, 100, 117, 99, 101, 115, 101, 120, 99, 111, 109, 109, 117, 110, 105, 99, 97, 116, 101, 115, 109, 97, 119, 107, 105, 115, 104, 99, 117, 112, 115, 102, 117, 108 },
        { 97, 109, 98, 105, 118, 97, 108, 101, 110, 116, 108, 121, 115, 112, 111, 107, 101, 110, 100, 101, 109, 97, 110, 100, 105, 110, 103, 100, 101, 116, 101, 114, 105, 111, 114, 97, 116, 101 },
        { 97, 109, 101, 108, 105, 111, 114, 97, 116, 105, 110, 103, 104, 111, 117, 115, 101, 99, 108, 101, 97, 110, 115, 99, 97, 112, 97, 99, 105, 116, 97, 110, 99, 101, 73, 112, 104, 105, 103, 101, 110, 105, 97, 97, 110, 97, 101, 115, 116, 104, 101, 116, 105, 122, 101, 102, 117, 110, 110, 101, 108, 108, 105, 110, 103, 117, 108, 99, 101, 114, 97, 116, 105, 111, 110, 112, 117, 99, 107, 101, 114, 83, 97, 100, 105, 101 },
        { 97, 114, 116, 101, 114, 105, 101, 115, 109, 97, 117, 108, 101, 100, 102, 111, 117, 110, 100, 115, 103, 121, 112, 112, 101, 100, 110, 111, 110, 101, 120, 105, 115, 116, 101, 110, 116, 115, 104, 105, 112, 109, 97, 116, 101, 115 },
        { 97, 117, 103, 109, 101, 110, 116, 105, 110, 103, 107, 105, 101, 108, 98, 97, 115, 97, 115, 105, 110, 102, 111, 114, 109, 115, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 70, 97, 116, 105, 109, 105, 100, 100, 114, 97, 102, 116, 105, 101, 115, 116, 80, 97, 115, 115, 105, 111, 110, 119, 111, 114, 107, 104, 111, 117, 115, 101, 115 },
        { 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100, 75, 105, 112, 100, 101, 101, 112, 101, 110 },
        { 98, 97, 115, 97, 108, 116, 103, 108, 117, 101, 115, 102, 108, 101, 101, 116, 101, 115, 116, 117, 114, 105, 110, 97, 116, 101, 100, 90, 111, 114, 111, 97, 115, 116, 101, 114, 112, 111, 115, 116, 105, 110, 103, 111, 98, 102, 117, 115, 99, 97, 116, 101 },
        { 98, 108, 105, 110, 107, 101, 114, 101, 100, 118, 105, 101, 115, 99, 97, 114, 121, 97, 116, 105, 100, 115 },
        { 98, 108, 117, 115, 116, 101, 114, 101, 100, 99, 117, 108, 112, 114, 105, 116, 115, 83, 99, 104, 119, 105, 110, 103, 101, 114, 111, 110, 117, 115, 110, 111, 110, 99, 111, 109, 109, 101, 114, 99, 105, 97, 108 },
        { 98, 111, 114, 101, 100, 111, 109, 99, 111, 110, 102, 105, 103, 117, 114, 105, 110, 103, 117, 110, 102, 97, 105, 114, 108, 121, 105, 110, 116, 101, 114, 109, 105, 116, 116, 101, 110, 116, 101, 110, 116, 104, 114, 97, 108, 108, 105, 110, 103, 99, 111, 109, 112, 97, 110, 105, 111, 110, 97, 98, 108, 101, 105, 116, 97, 108, 105, 99, 105, 122, 101, 115, 114, 111, 109, 97, 110, 116, 105, 99, 105, 122, 101, 100, 79, 108, 97 },
        { 98, 114, 105, 100, 103, 101, 104, 101, 97, 100, 107, 101, 121, 98, 111, 97, 114, 100, 101, 114, 115, 101, 112, 97, 114, 97, 116, 101, 108, 121, 102, 108, 105, 109, 115, 105, 101, 114, 115, 112, 101, 108, 108, 98, 105, 110, 100, 105, 110, 103, 105, 110, 116, 101, 114, 110, 101, 99, 105, 110, 101, 114, 101, 112, 114, 105, 115, 97, 108, 115, 104, 105, 115, 116, 111, 114, 105, 97, 110, 99, 114, 111, 115, 115, 98, 114, 101, 100, 109, 105, 100, 112, 111, 105, 110, 116, 115 },
        { 98, 117, 110, 103, 108, 101, 114, 99, 97, 108, 105, 112, 101, 114, 101, 100, 99, 111, 110, 116, 114, 111, 108, 108, 101, 114, 115, 98, 111, 116, 99, 104, 101, 115 },
        { 98, 117, 115, 105, 110, 101, 115, 115, 119, 111, 109, 101, 110, 115, 117, 98, 115, 101, 116, 115, 117, 108, 116, 105, 109, 97, 116, 117, 109, 115, 116, 97, 98, 108, 111, 105, 100, 115, 115, 99, 104, 111, 111, 108, 109, 97, 116, 101, 115, 100, 101, 102, 105, 110, 101, 114, 117, 110, 97, 99, 99, 101, 112, 116, 97, 98, 108, 101 },
        { 99, 97, 114, 112, 101, 110, 116, 101, 114, 105, 110, 103 },
        { 99, 104, 117, 110, 107, 105, 101, 114, 101, 110, 116, 97, 105, 108, 67, 97, 116, 97, 108, 105, 110, 97, 105, 109, 112, 101, 114, 102, 101, 99, 116, 101, 117, 112, 104, 111, 114, 105, 97, 109, 111, 116, 111, 114, 99, 121, 99, 108, 105, 115, 116 },
        { 99, 105, 114, 99, 117, 108, 97, 116, 101, 112, 101, 97, 107, 101, 100 },
        { 99, 111, 103, 119, 104, 101, 101, 108, 103, 105, 103, 103, 108, 105, 101, 115, 116, 119, 97, 115, 104, 101, 114, 115, 100, 111, 109, 105, 110, 97, 110, 116, 108, 121, 114, 101, 99, 97, 110, 116, 99, 111, 110, 116, 97, 109, 105, 110, 97, 110, 116, 115, 116, 114, 111, 110, 103, 101, 114, 101, 110, 118, 105, 97, 98, 108, 101, 99, 111, 109, 102, 111, 114, 116, 83, 104, 121, 108, 111, 99, 107, 105, 97, 110 },
        { 99, 111, 104, 101, 114, 101, 100, 98, 117, 115, 104, 109, 97, 110, 97, 99, 114, 111, 98, 97, 116, 115, 97, 108, 116, 105, 116, 117, 100, 101, 115, 99, 97, 118, 101, 110, 103, 105, 110, 103, 99, 114, 117, 99, 105, 102, 105, 101, 100, 115, 116, 97, 103, 103, 101, 114, 115, 115, 101, 113, 117, 105, 110, 101, 100, 115, 110, 101, 97, 107, 121, 99, 111, 118, 101, 116, 111, 117, 115, 110, 101, 115, 115 },
        { 99, 111, 108, 111, 110, 105, 122, 101, 115, 119, 114, 101, 115, 116 },
        { 99, 111, 109, 112, 97, 99, 116, 101, 115, 116, 76, 97, 119, 114, 101, 110, 99, 101, 115, 109, 105, 116, 101, 117, 110, 99, 111, 109, 112, 108, 105, 99, 97, 116, 101, 100 },
        { 99, 111, 110, 115, 99, 105, 101, 110, 99, 101, 115, 100, 105, 115, 105, 110, 102, 101, 99, 116 },
        { 99, 111, 110, 115, 116, 114, 105, 99, 116, 109, 101, 116, 97, 98, 111, 108, 105, 122, 101, 72, 111, 102, 115, 116, 97, 100, 116, 101, 114, 100, 101, 102, 105, 110, 105, 116, 101, 110, 101, 115, 115, 97, 103, 105, 116, 97, 116, 105, 110, 103, 107, 101, 121, 115, 99, 111, 108, 108, 101, 99, 116, 105, 118, 105, 122, 105, 110, 103, 105, 110, 99, 111, 114, 112, 111, 114, 97, 116, 101, 100 },
        { 99, 111, 110, 116, 105, 110, 117, 117, 109, 115, 100, 101, 109, 111, 110, 115, 116, 114, 97, 116, 111, 114, 97, 110, 105, 112, 112, 105, 101, 114 },
        { 99, 114, 101, 119, 115, 104, 111, 114, 116, 115, 116, 111, 112, 115, 116, 111, 119, 110, 115, 102, 111, 108, 107, 116, 104, 114, 117, 117, 110, 102, 111, 114, 101, 115, 101, 101, 97, 98, 108, 101, 108, 105, 115, 116, 108, 101, 115, 115, 108, 121, 99, 108, 101, 97, 114, 101, 100, 98, 111, 98, 116, 97, 105, 108, 115, 109, 101, 116, 101, 114, 105, 110, 103, 115, 104, 117, 102, 102, 108, 101, 115 },
        { 99, 114, 111, 116, 99, 104, 101, 116, 121, 114, 101, 112, 111, 115, 101, 102, 117, 108, 111, 114, 112, 104, 97, 110, 97, 103, 101 },
        { 99, 117, 114, 108, 101, 119, 115, 67, 104, 97, 110 },
        { 99, 117, 115, 104, 121, 97, 109, 111, 114, 112, 104, 111, 117, 115, 110, 101, 115, 115, 99, 114, 97, 109, 112, 98, 117, 108, 98, 115, 118, 101, 114, 105, 102, 105, 101, 100, 71, 97, 110, 100, 104, 105, 104, 97, 114, 118, 101, 115, 116, 66, 97, 110, 116, 105, 110, 103, 115, 112, 111, 116, 108, 105, 103, 104, 116 },
        { 100, 101, 97, 108, 105, 110, 103, 97, 110, 105, 109, 117, 115, 100, 105, 115, 113, 117, 105, 101, 116, 115, 100, 101, 116, 114, 97, 99, 116, 105, 111, 110, 100, 105, 115, 99, 114, 101, 100, 105, 116, 97, 98, 108, 101, 115, 97, 108, 116, 121 },
        { 100, 111, 119, 110, 115, 105, 122, 101, 100, 98, 105, 116, 109, 97, 112, 122, 111, 111, 109, 105, 110, 103, 108, 121, 114, 105, 99, 105, 115, 116, 102, 111, 114, 98, 105, 100, 100, 105, 110, 103, 115, 104, 101, 101, 112, 114, 101, 115, 117, 108, 116, 97, 110, 116, 115, 115, 99, 97, 108, 97, 114, 115 },
        { 100, 114, 97, 102, 116, 115, 109, 97, 110, 115, 108, 97, 115, 104, 105, 110, 103, 101, 110, 110, 117, 105, 100, 117, 109, 112, 105, 101, 115, 116, 112, 117, 115, 104, 105, 101, 114, 74, 97, 118, 97, 115, 65, 108, 105, 99, 101, 112, 97, 108, 109, 115 },
        { 100, 114, 97, 103, 111, 110, 102, 108, 105, 101, 115, 70, 97, 114, 114, 101, 108, 108, 97, 114, 99, 97, 110, 101, 100, 101, 114, 114, 105, -61, -88, 114, 101, 115, 115, 117, 112, 101, 114, 98, 108, 121, 99, 111, 109, 109, 105, 115, 115, 97, 114, 121, 111, 98, 105, 116, 117, 97, 114, 121, 99, 111, 110, 102, 105, 100, 101, 115 },
        { 101, 120, 97, 109, 105, 110, 97, 116, 105, 111, 110, 115, 110, 105, 98, 98, 108, 101, 109, 97, 115, 104, 102, 108, 97, 109, 109, 97, 98, 108, 101, 115, 97, 114, 99, 104, 105, 118, 101, 115 },
        { 101, 120, 117, 108, 116, 101, 100, 104, 121, 100, 114, 111, 109, 101, 116, 101, 114, 115 },
        { 103, 97, 122, 101, 114, 99, 111, 110, 116, 101, 109, 112, 108, 97, 116, 105, 118, 101, 115, 112, 101, 100, 105, 97, 116, 114, 105, 99, 105, 110, 115, 112, 101, 99, 116, 111, 114, 115, 101, 114, 97, 100, 105, 99, 97, 116, 105, 111, 110, 115, 107, 105, 108, 108, 115 },
        { 103, 101, 110, 117, 105, 110, 101, 77, 97, 99, 107, 101, 110, 122, 105, 101, 66, 117, 110, 99, 104, 101 },
        { 103, 101, 114, 97, 110, 105, 117, 109, 105, 110, 102, 111, 109, 101, 114, 99, 105, 97, 108, 103, 97, 109, 98, 105, 116, 114, 101, 97, 100, 105, 101, 115, 116, 101, 108, 101, 99, 116, 114, 111, 108, 121, 116, 105, 99, 109, 97, 105, 100, 78, 97, 105, 112, 97, 117, 108, 111, 117, 116, 115, 104, 105, 110, 105, 110, 103, 78, 105, 99, 97, 114, 97, 103, 117, 97, 119, 111, 111, 102, 101, 114, 115 },
        { 103, 104, 101, 116, 116, 111, 103, 114, 111, 119, 108, 101, 100, 115, 104, 111, 111, 116, 111, 117, 116, 109, 97, 108, 105, 103, 110, 97, 110, 99, 121, 99, 104, 97, 114, 97, 99, 116, 101, 114, 105, 122, 97, 116, 105, 111, 110, 115, 115, 112, 111, 111, 114, 99, 117, 110, 110, 105, 110, 103, 101, 115, 116 },
        { 103, 108, 111, 99, 107, 101, 110, 115, 112, 105, 101, 108, 115 },
        { 103, 114, 105, 110, 100, 115, 116, 111, 110, 101, 115, 108, 111, 98, 98, 101, 114, 101, 100, 105, 110, 116, 114, 105, 103, 117, 105, 110, 103, 108, 121, 115, 116, 114, 101, 116, 99, 104, 121, 99, 111, 111, 108, 101, 114, 115, 115, 99, 114, 97, 109, 109, 101, 100, 112, 114, 111, 109, 101, 110, 97, 100, 101, 115, 115, 116, 111, 114, 121, 98, 111, 111, 107, 115, 112, 104, 97, 114, 109, 97, 99, 105, 101, 115, 115, 104, 111, 119, 111, 102, 102, 115 },
        { 103, 114, 117, 101, 108, 108, 105, 110, 103, 115, 100, 114, 97, 103, 111, 110, 115, 108, 111, 112, 101, 101, 120, 112, 111, 110, 101, 110, 116, 115, 104, 97, 105, 108, 105, 110, 103 },
        { 103, 117, 109, 100, 114, 111, 112, 115 },
        { 104, 101, 114, 111, 110, 118, 101, 110, 103, 101, 102, 117, 108, 80, 111, 110, 116, 99, 104, 97, 114, 116, 114, 97, 105, 110, 109, 105, 100, 100, 108, 105, 110, 103, 112, 97, 108, 101, 102, 97, 99, 101, 116, 114, 117, 99, 107, 108, 101, 115, 68, 101, 99, 107, 101, 114, 69, 122, 101, 107, 105, 101, 108, 75, 97, 116, 101, 108, 121, 110, 102, 97, 117, 108, 116, 101, 100 },
        { 104, 111, 109, 105, 101, 115, 116, 99, 104, 101, 99, 107, 112, 111, 105, 110, 116, 106, 101, 119, 101, 108, 101, 114, 115, 109, 105, 115, 116, 114, 117, 115, 116, 102, 117, 108, 109, 105, 108, 113, 117, 101, 116, 111, 97, 115, 116 },
        { 105, 110, 116, 101, 108, 108, 101, 99, 116, 117, 97, 108, 105, 122, 101, 115, 115, 99, 114, 97, 116, 99, 104, 101, 100, 112, 111, 97, 99, 104 },
        { 105, 110, 118, 101, 115, 116, 105, 103, 97, 116, 111, 114, 97, 102, 116, 101, 114, 98, 105, 114, 116, 104, 115, 111, 118, 101, 114, 99, 111, 109, 112, 101, 110, 115, 97, 116, 101, 100, 110, 117, 108, 108, 105, 116, 121, 97, 100, 100, 108, 105, 110, 103 },
        { 106, 111, 115, 116, 108, 105, 110, 103, 99, 97, 116, 99, 104, 119, 111, 114, 100, 80, 108, 97, 116, 97, 101, 97, 100, 111, 119, 110, 116, 105, 109, 101, 105, 110, 99, 97, 112, 97, 98, 105, 108, 105, 116, 121, 97, 100, 100, 101, 114 },
        { 108, 105, 110, 107, 101, 114, 119, 97, 115, 116, 97, 103, 101, 98, 97, 114, 98, 97, 114, 105, 115, 109, 115, 115, 117, 103, 97, 114, 108, 101, 115, 115, 79, 110, 97, 115, 115, 105, 115, 98, 97, 98, 105, 101, 100, 106, 105, 102, 102, 105, 101, 115, 114, 97, 112, 105, 100, 115, 80, 111, 111, 108, 101, 100, 101, 100, 117, 99, 105, 110, 103 },
        { 108, 105, 116, 104, 111, 103, 114, 97, 112, 104, 101, 114, 99, 97, 110, 116, 111, 110, 105, 109, 97, 103, 101, 115, 99, 104, 97, 109, 111, 109, 105, 108, 101, 115, 102, 108, 97, 103, 101, 108, 108, 97, 116, 101, 115, 100, 105, 115, 99, 101, 114, 110, 105, 98, 108, 101 },
        { 108, 121, 101, 97, 112, 111, 112, 108, 101, 120, 105, 101, 115 },
        { 109, 97, 104, 97, 114, 97, 110, 101, 101, 109, 111, 111, 110, 115, 116, 114, 117, 99, 107, 106, 97, 98, 98, 101, 114, 101, 100, 109, 117, 99, 107, 121, 112, 111, 112, 101 },
        { 109, 97, 121, 102, 108, 111, 119, 101, 114, 115, 115, 110, 117, 99, 107 },
        { 109, 105, 115, 115, 116, 97, 116, 101, 115, 97, 110, 116, 105, 116, 114, 117, 115, 116, 109, 105, 110, 100, 101, 100, 110, 101, 115, 115 },
        { 109, 111, 100, 101, 114, 110, 105, 122, 101, 115, 115, 97, 118, 97, 103, 105, 110, 103, 87, 97, 115, 97, 116, 99, 104, 107, 105, 99, 107, 105, 101, 114, 115, 116, 97, 98, 105, 108, 105, 122, 101, 114, 115, 111, 108, 105, 100, 110, 101, 115, 115, 115, 101, 105, 122, 101, 115, 83, 104, 97, 107, 101, 115, 112, 101, 97, 114, 101, 97, 110 },
        { 109, 111, 116, 111, 114, 99, 97, 114, 116, 104, 114, 111, 110, 101, 68, 105, 111, 110, 121, 115, 117, 115, 76, 97, 112, 112 },
        { 109, 121, 111, 112, 105, 99, 103, 104, 111, 115, 116, 108, 105, 101, 114, 84, 105, 114, 97, 110, 97, 118, 101, 114, 98, 97, 108, 105, 122, 101, 115, 115, 104, 105, 114, 107, 115 },
        { 110, 97, 116, 105, 111, 110, 97, 108, 105, 122, 97, 116, 105, 111, 110, 115, 77, 97, 103, 105, 110, 111, 116, 114, 111, 109, 97, 110, 116, 105, 99, 105, 122, 101, 115, 97, 110, 116, 105, 112, 104, 111, 110, 97, 108, 66, 97, 99, 116, 114, 105, 97, 99, 104, 101, 99, 107, 101, 114, 101, 100, 67, 97, 115, 97, 110, 100, 114, 97, 112, 111, 116, 115, 104, 101, 114, 100, 115, 115, 99, 111, 119, 108, 114, 101, 109, 111, 100, 101, 108, 115 },
        { 110, 101, 117, 116, 114, 97, 108, 105, 122, 101, 77, 67, 73, 119, 101, 100, 103, 101, 115, 115, 101, 120, 116, 97, 110, 116, 115, 98, 97, 114, 111, 109, 101, 116, 101, 114, 115, 112, 105, 109, 101, 110, 116, 111, 115, 102, 105, 115, 104, 101, 114, 121, 115, 109, 111, 111, 116, 104, 105, 110, 103, 102, 108, 97, 118, 111, 114, 108, 101, 115, 115 },
        { 110, 101, 119, 115, 108, 101, 116, 116, 101, 114, 105, 109, 109, 105, 110, 101, 110, 99, 101 },
        { 110, 111, 100, 100, 121, 88, 101, 110, 105, 97, 97, 109, 112, 115, 115, 121, 110, 100, 105, 99, 97, 116, 101, 115, 99, 111, 109, 112, 97, 115, 115, 105, 111, 110, 97, 116, 101, 108, 121, 70, 114, 111, 110, 116, 101, 110, 97, 99, 115, 117, 110, 116, 97, 110, 110, 105, 110, 103, 99, 111, 110, 102, 111, 114, 109, 105, 115, 116, 115, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 102, 101, 99, 97, 108 },
        { 110, 111, 105, 115, 101, 108, 101, 115, 115, 115, 119, 97, 108, 108, 111, 119, 101, 100, 99, 117, 114, 118, 121, 114, 97, 115, 104, 101, 115, 116, 114, 105, 98, 117, 116, 101, 115, 114, 101, 109, 97, 114, 114, 105, 97, 103, 101, 115, 119, 101, 97, 116, 104, 101, 114, 109, 101, 110, 115, 101, 115, 97, 109, 101, 100, 105, 99, 116, 117, 109, 115, 77, 97, 108, 97, 99, 99, 97 },
        { 111, 108, 100, 101, 110, 110, 117, 98, 105, 108, 101, 102, 114, 117, 105, 116, 108, 101, 115, 115, 110, 111, 109, 105, 110, 97, 108, 108, 101, 110, 105, 101, 110, 99, 121, 98, 97, 109, 98, 111, 111, 122, 108, 101, 100, 108, 111, 118, 101, 114, 115, 115, 99, 117, 114, 102, 112, 117, 109, 112 },
        { 111, 112, 112, 111, 114, 116, 117, 110, 101, 99, 111, 110, 106, 117, 110, 99, 116, 117, 114, 101, 100, 105, 118, 105, 100, 101, 115, 99, 101, 114, 101, 109, 111, 110, 105, 111, 117, 115, 108, 121, 116, 97, 105, 110, 116, 105, 110, 103, 108, 105, 110, 101, 115, 116, 111, 112, 115, 111, 105, 108, 80, 97, 110, 97, 115, 111, 110, 105, 99, 72, 97, 119, 97, 105, 105, 112, 97, 114, 97, 108, 121, 116, 105, 99 },
        { 111, 118, 101, 114, 114, 117, 108, 101, 115, 115, 101, 97, 115, 104, 101, 108, 108, 115, 99, 111, 110, 103, 114, 101, 115, 115, 105, 111, 110, 97, 108, 100, 101, 97, 108, 115, 101, 109, 105, 103, 114, 97, 116, 101, 73, 122, 118, 101, 115, 116, 105, 97 },
        { 112, 97, 105, 108, 102, 117, 108, 100, 105, 118, 101, 114, 115, 105, 102, 105, 99, 97, 116, 105, 111, 110, 105, 110, 101, 108, 101, 103, 97, 110, 116, 108, 121, 104, 97, 110, 107, 105, 101 },
        { 112, 104, 105, 108, 97, 110, 116, 104, 114, 111, 112, 105, 115, 116, 102, 105, 120, 101, 114, 101, 99, 115, 116, 97, 116, 105, 99, 111, 97, 102, 115, 105, 116, 101, 115, 109, 101, 108, 111, 100, 114, 97, 109, 97, 110, 117, 108, 108, 105, 102, 105, 101, 115, 115, 111, 117, 110, 100, 105, 110, 103 },
        { 112, 114, 105, 110, 99, 105, 112, 97, 108, 115, 104, 101, 105, 115, 116, 106, 111, 117, 110, 99, 105, 110, 103 },
        { 112, 114, 105, 118, 97, 116, 105, 122, 101, 100, 72, 111, 108, 108, 105, 101, 109, 101, 114, 114, 121, 116, 97, 98, 98, 105, 110, 103, 99, 114, 97, 99, 107, 100, 111, 119, 110, 77, 101, 115, 115, 105, 97, 101, 110, 105, 110, 115, 117, 108, 116, 115 },
        { 112, 114, 111, 102, 105, 99, 105, 101, 110, 116, 111, 110, 111, 120, 105, 100, 105, 122, 105, 110, 103, 83, 112, 101, 110, 99, 101, 100, 101, 118, 111, 117, 116, 110, 101, 115, 115, 108, 105, 99, 101, 110, 99, 101, 100 },
        { 114, 101, 97, 100, 111, 117, 116, 101, 109, 98, 108, 97, 122, 111, 110, 105, 110, 103 },
        { 114, 101, 97, 115, 115, 117, 114, 101, 100, 100, 97, 115, 104, 105, 107, 105, 100, 105, 115, 112, 108, 97, 99, 105, 110, 103, 89, 101, 109, 101, 110, 71, 114, 111, 109, 121, 107, 111, 101, 100, 103, 101, 119, 105, 115, 101, 115, 101, 97, 114, 99, 104, 101, 114 },
        { 114, 101, 112, 108, 97, 99, 105, 110, 103, 101, 109, 101, 114, 103, 101, 110, 99, 101, 115, 121, 110, 116, 97, 99, 116, 105, 99, 97, 108, 99, 104, 111, 112, 112, 101, 114, 115, 104, 111, 105, 115, 116, 101, 100, 108, 97, 110, 107, 105, 110, 101, 115, 115, 117, 110, 99, 111, 110, 113, 117, 101, 114, 97, 98, 108, 101, 101, 118, 105, 100, 101, 110, 99, 105, 110, 103, 112, 101, 114, 115, 117, 97, 115, 105, 118, 101, 110, 101, 115, 115 },
        { 114, 101, 117, 110, 105, 102, 105, 101, 100, 115, 99, 104, 111, 108, 97, 114, 115, 112, 117, 116, 97, 116, 105, 118, 101, 99, 97, 114, 111, 117, 115, 101, 114, 115, 114, 111, 117, 110, 100, 101, 114, 98, 111, 108, 97, 112, 108, 101, 110, 105, 112, 111, 116, 101, 110, 116, 105, 97, 114, 121 },
        { 115, -61, -87, 97, 110, 99, 101 },
        { 115, 108, 97, 118, 101, 114, 105, 110, 103, 116, 114, 101, 97, 116, 97, 98, 108, 101, 105, 110, 100, 105, 118, 105, 100, 117, 97, 108, 105, 115, 116, 105, 99, 115, 117, 98, 98, 97, 115, 101, 109, 101, 110, 116, 115 },
        { 115, 116, 101, 97, 100, 105, 101, 114, 115, 97, 118, 97, 110, 110, 97, 104, 104, 121, 100, 114, 97, 108, 105, 113, 117, 105, 100, 105, 122, 101, 115, 99, 114, 111, 111, 110, 101, 114, 115, 104, 111, 110, 111, 114, 115, 119, 97, 108, 108, 111, 119, 111, 99, 99, 97, 115, 105, 111, 110, 65, 98, 110, 101, 114 },
        { 115, 110, 101, 97, 107, 105, 100, 101, 97, 108, 105, 115, 116, 115, 99, 97, 116, 116, 101, 114, 105, 110, 103, 112, 97, 114, 97, 112, 101, 116, 115, 109, 101, 97, 103, 101, 114, 101, 109, 97, 105, 108 },
        { 115, 119, 101, 97, 116, 101, 114, 115, 112, 111, 108, 105, 116, 105, 99, 97, 108, 116, 114, 105, 98, 101, 115, 109, 97, 110, 112, 114, -61, -87, 99, 105, 115, 105, 110, 103 },
        { 115, 116, 101, 114, 110, 101, 114, 115, 116, 97, 114, 102, 105, 115, 104, 105, 110, 100, 111, 109, 105, 116, 97, 98, 108, 101, 115, 112, 108, 97, 121, 101, 100, 105, 110, 106, 101, 99, 116, 111, 114, 115 },
        { 115, 97, 103, 97, 99, 105, 116, 121, 115, 112, 104, 105, 110, 120, 101, 115 },
        { 115, 105, 103, 110, 97, 108, 105, 110, 103, 98, 121, 108, 105, 110, 101, 115, 116, 114, 97, 112, 112, 101, 114, 115, 114, 101, 99, 111, 105, 108, 115, 97, 99, 117, 112, 117, 110, 99, 116, 117, 114, 105, 115, 116, 115, 103, 101, 110, 117, 102, 108, 101, 99, 116, 105, 111, 110, 116, 101, 115, 116, 105, 110, 103 },
        { 115, 99, 104, 117, 115, 115, 105, 110, 103, 101, 110, 118, 101, 108, 111, 112, 101, 100, 116, 114, 117, 99, 117, 108, 101, 110, 99, 101, 69, 110, 105, 100, 99, 114, 117, 110, 99, 104, 101, 114, 117, 110, 108, 101, 97, 114, 110, 104, 111, 117, 115, 101, 104, 117, 115, 98, 97, 110, 100, 67, 104, 105, 104, 117, 97, 104, 117, 97, 101, 121, 101, 98, 97, 108, 108, 119, 97, 121, 102, 97, 114, 101, 114 },
        { 115, 104, 105, 102, 116, 115, 105, 110, 118, 105, 100, 105, 111, 117, 115, 115, 105, 114, 101, 110, 115, 99, 101, 110, 116, 114, 97, 108, 115, 117, 99, 107, 108, 101, 100 },
        { 115, 97, 105, 108, 98, 111, 97, 114, 100, 115, 100, 101, 97, 116, 104, 98, 101, 100, 115 },
        { 115, 111, 109, 98, 114, 101, 108, 121, 109, 117, 114, 107, 121, 100, 114, 97, 119, 101, 114, 114, 101, 109, 97, 116, 99, 104, 101, 115 },
        { 115, 105, 110, 103, 108, 101, 116, 111, 110, 103, 97, 105, 110, 115, 112, 105, 116, 99, 104, 101, 115, 66, 101, 97, 116, 114, 105, 120, 115, 97, 117, 99, 105, 108, 121 },
        { 115, 108, 111, 116, 116, 105, 110, 103, 116, 114, 111, 108, 108, 105, 101, 115 },
        { 115, 111, 117, 116, 104, 101, 114, 108, 105, 101, 115, 97, 112, 112, 114, 105, 115, 105, 110, 103, 100, 105, 115, 115, 111, 99, 105, 97, 116, 101, 115 },
        { 115, 97, 118, 111, 114, 115, 119, 104, 105, 116, 101, 102, 105, 115, 104 },
        { 116, 97, 98, 101, 114, 110, 97, 99, 108, 101, 115, 65, 108, 121, 99, 101, 102, 105, 99, 116, 105, 111, 110, 97, 108, 105, 122, 101, 114, 101, 112, 111, 115, 101, 100, 67, 97, 103, 110, 101, 121, 98, 117, 100, 100, 121, 97, 116, 116, 117, 110, 101, 115, 99, 97, 117, 116, 105, 111, 117, 115, 108, 105, 110, 115, 101, 101, 100 },
        { 116, 97, 120, 111, 110, 111, 109, 105, 101, 115, 118, 105, 99, 105, 111, 117, 115, 106, 101, 116, 116, 121, 115, 116, 114, 97, 105, 116, 106, 97, 99, 107, 101, 116, 112, 114, 111, 99, 101, 115, 115, 101, 100, 100, 101, 102, 111, 114, 101, 115, 116, 101, 100, 112, 117, 110, 99, 104, 101, 115 },
        { 116, 101, 114, 114, 105, 98, 108, 101, 105, 110, 116, 114, 105, 103, 117, 101, 100 },
        { 116, 114, 97, 110, 115, 102, 105, 120, 119, 111, 111, 100, 119, 111, 114, 109, 98, 108, 111, 116, 116, 101, 114, 102, 108, 101, 101, 99, 105, 101, 114, 112, 101, 114, 105, 108, 101, 100 },
        { 117, 110, 98, 111, 108, 116, 101, 100, 99, 104, 105, 108, 101 },
        { 117, 118, 117, 108, 97, 114, 119, 111, 114, 107, 115, 101, 97, 114, 116, 104, 101, 110, 102, 105, 114, 101, 112, 114, 111, 111, 102, 101, 100, 104, 101, 97, 116, 101, 114, 103, 101, 110, 101, 114, 97, 108, 105, 122, 97, 116, 105, 111, 110, 115, 74, 111, 108, 101, 110, 101 },
        { 118, 105, 115, 105, 98, 108, 121 },
        { 119, 111, 111, 108, 103, 97, 116, 104, 101, 114, 105, 110, 103, 98, 121, 119, 97, 121, 115, 97, 116, 111, 109, 105, 122, 101, 114, 99, 97, 119, 105, 110, 103, 119, 97, 105, 110, 115, 99, 111, 116, 105, 110, 103, 114, 101, 103, 101, 110, 101, 114, 97, 116, 105, 118, 101, 110, 111, 100, 101, 115, 102, 117, 108, 99, 114, 117, 109 },
    };
    ASSERT_TRUE(TestAllSkaSort2Combinations(to_sort));
}

static std::vector<std::string> string_sort_input(size_t num_items)
{
    std::uniform_int_distribution<int> list_choice(0, 10);
    std::uniform_int_distribution<int> num_words(1, 10);
    const std::vector<const char *> & word_list = get_word_list();
    const std::vector<const char *> & kern_log = get_kern_log();
    std::uniform_int_distribution<size_t> random_word(0, word_list.size() - 1);
    std::uniform_int_distribution<size_t> random_log(0, kern_log.size() - 1);
    std::vector<std::string> result(num_items);
    for (std::string & item : result)
    {
        if (list_choice(global_randomness) != 0)
        {
            for (int i = 0, end = num_words(global_randomness); i < end; ++i)
            {
                item += word_list[random_word(global_randomness)];
            }
        }
        else
        {
            item = kern_log[random_log(global_randomness)];
        }
    }
    return result;
}
static std::vector<std::list<int>> list_sort_input(size_t num_items)
{
    std::vector<std::string> string_input = string_sort_input(num_items);
    std::vector<std::list<int>> result;
    result.reserve(string_input.size());
    for (const std::string & str : string_input)
    {
        result.emplace_back();
        std::list<int> & to_build = result.back();
        for (char c : str)
            to_build.emplace_back(c);
    }
    return result;
}

TEST(ska_sort2, list)
{
    for (int i = 0; i < 1000; ++i)
    {
        std::vector<std::list<int>> input = list_sort_input(128);
        ska_sort2(input.begin(), input.end());
        if (!std::is_sorted(input.begin(), input.end()))
        {
            std::vector<std::vector<int>> as_vector;
            as_vector.reserve(input.size());
            for (const std::list<int> & list : input)
            {
                as_vector.emplace_back();
                std::vector<int> & to_build = as_vector.back();
                to_build.reserve(list.size());
                to_build.insert(to_build.end(), list.begin(), list.end());
            }
            ska_sort2(as_vector.begin(), as_vector.end());
            ASSERT_FALSE(std::is_sorted(as_vector.begin(), as_vector.end()));
            for (const std::vector<int> & not_sorted : as_vector)
            {
                std::cout << "{ ";
                const char * separator = "";
                for (int i : not_sorted)
                {
                    std::cout << separator << i;
                    separator = ", ";
                }
                std::cout << " }" << std::endl;
            }
            return;
        }
    }
}

struct MoveCounter
{
    static size_t move_construct_counter;
    static size_t move_counter;
    uint8_t to_sort = 0;
    MoveCounter(uint8_t value)
        : to_sort(value)
    {
    }
    MoveCounter(MoveCounter && other)
        : to_sort(std::move(other.to_sort))
    {
        ++move_construct_counter;
    }
    MoveCounter & operator=(MoveCounter && other)
    {
        to_sort = std::move(other.to_sort);
        ++move_counter;
        return *this;
    }
    MoveCounter(const MoveCounter &) = delete;
    MoveCounter & operator=(const MoveCounter &) = delete;
};
size_t MoveCounter::move_construct_counter = 0;
size_t MoveCounter::move_counter = 0;


TEST(ska_sort2, move_count)
{
    size_t extract_count = 0;
    auto generate_input = []
    {
        std::mt19937_64 randomness(5);
        std::uniform_int_distribution<int> distribution(0, std::numeric_limits<uint8_t>::max());
        int num_ints = 1000;
        std::vector<MoveCounter> to_sort;
        for (int i = 0; i < num_ints; ++i)
        {
            to_sort.emplace_back(distribution(randomness));
        }
        return to_sort;
    };
    auto extract_key = [&extract_count](const MoveCounter & v)
    {
        ++extract_count;
        return v.to_sort;
    };

    struct Counters
    {
        size_t num_extracts;
        size_t num_moves;
        size_t num_move_constructs;
    };
    auto measure_counts = [&](auto && sort)
    {
        size_t extract_before = extract_count;
        size_t moved_before = MoveCounter::move_counter;
        size_t moved_construct_before = MoveCounter::move_construct_counter;
        sort();
        return Counters{ extract_count - extract_before, MoveCounter::move_counter - moved_before, MoveCounter::move_construct_counter - moved_construct_before };
    };
    Counters default_ska_sort = measure_counts([&]
    {
        std::vector<MoveCounter> to_sort = generate_input();
        ska_sort2(to_sort.begin(), to_sort.end(), extract_key);
    });
    Counters american_flag_sort = measure_counts([&]
    {
        std::vector<MoveCounter> to_sort = generate_input();
        detail::ska_sort2_with_settings<AmericanFlagSortSettings>(to_sort.begin(), to_sort.end(), extract_key);
    });
    Counters ska_byte_sort = measure_counts([&]
    {
        std::vector<MoveCounter> to_sort = generate_input();
        detail::ska_sort2_with_settings<SkaByteSortSettings>(to_sort.begin(), to_sort.end(), extract_key);
    });
    ASSERT_NE(default_ska_sort.num_extracts, 0);
    ASSERT_NE(american_flag_sort.num_extracts, 0);
    ASSERT_NE(ska_byte_sort.num_extracts, 0);
}

#endif

}
#endif
